- name: ec2 poll (vm)
  hosts: localhost
  tasks:
    - name: Get instance info
      community.aws.ec2_instance_info:
        filters:
          tag:Name: jupyter-{{ user.name }}
          tag:app: jupyter-ansiblespawner
          # Todo: Also creating?
          instance-state-name: running
      register: _instance

    # "set_fact: ansiblespawner_out" will be passed back to the spawner
    - set_fact:
        ansiblespawner_out:
          instance: "{{ _instance.instances.0 | default(None) }}"
          exists: "{{ _instance.instances | length > 0 }}"
          running: false

- name: ec2 poll (service)
  hosts: jupyter-{{ user.name }}
  become: true

  tasks:
    - name: Get list of services
      service_facts:

    - debug:
        msg: "{{ ansible_facts.services['jupyterhub-singleuser.service'] | default('jupyterhub-singleuser.service missing') }}"

    # Overrides the "running" field from "ansiblespawner_out" in the previous play
    - set_fact:
        ansiblespawner_out:
          running: >-
            {{
              ('jupyterhub-singleuser.service' in ansible_facts.services) and ansible_facts.services['jupyterhub-singleuser.service'].state == 'running'
            }}

    - debug:
        var: ansiblespawner_out
